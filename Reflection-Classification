{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5cb6527e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-03-28T07:05:36.698591Z",
     "iopub.status.busy": "2025-03-28T07:05:36.698246Z",
     "iopub.status.idle": "2025-03-28T07:05:50.989308Z",
     "shell.execute_reply": "2025-03-28T07:05:50.988307Z"
    },
    "papermill": {
     "duration": 14.296252,
     "end_time": "2025-03-28T07:05:50.991285",
     "exception": false,
     "start_time": "2025-03-28T07:05:36.695033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Anak-Anak Model Performance:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.25      0.25      0.25       754\n",
      "           2       0.26      0.20      0.23       750\n",
      "           3       0.27      0.35      0.30       770\n",
      "           4       0.25      0.22      0.24       726\n",
      "\n",
      "    accuracy                           0.26      3000\n",
      "   macro avg       0.26      0.26      0.25      3000\n",
      "weighted avg       0.26      0.26      0.25      3000\n",
      "\n",
      "Remaja Model Performance:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.23      0.17      0.20       754\n",
      "           2       0.23      0.21      0.22       750\n",
      "           3       0.26      0.36      0.30       770\n",
      "           4       0.23      0.22      0.23       726\n",
      "\n",
      "    accuracy                           0.24      3000\n",
      "   macro avg       0.24      0.24      0.24      3000\n",
      "weighted avg       0.24      0.24      0.24      3000\n",
      "\n",
      "Dewasa Model Performance:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.25      0.17      0.20       754\n",
      "           2       0.22      0.18      0.20       750\n",
      "           3       0.27      0.39      0.32       770\n",
      "           4       0.24      0.25      0.24       726\n",
      "\n",
      "    accuracy                           0.25      3000\n",
      "   macro avg       0.24      0.25      0.24      3000\n",
      "weighted avg       0.24      0.25      0.24      3000\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['mood_prediction_model_dewasa.pkl']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import joblib\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv('/kaggle/input/iregreteverything/dataset.csv')  # Replace with your dataset file name\n",
    "\n",
    "# Encode categorical columns\n",
    "encoder = LabelEncoder()\n",
    "categorical_columns = [\n",
    "    'Senang_Sekolah', 'Frekuensi_Bermain', 'Kesulitan_Belajar', 'Tingkat_Bertengkar',\n",
    "    'Frekuensi_Membantu', 'Aktivitas_Favorit', 'Rencana_Besok', 'Kepuasan_Hari',\n",
    "    'Peningkatan_Besok', 'Perasaan_Sekolah', 'Stres_Tingkat', 'Interaksi_Teman_Keluarga',\n",
    "    'Dukungan_Sosial', 'Keyakinan_Tujuan_Hidup', 'Perasaan_Karier', 'Interaksi_Orang_Lain'\n",
    "]\n",
    "for column in categorical_columns:\n",
    "    data[column] = encoder.fit_transform(data[column].astype(str))\n",
    "\n",
    "# Map Mood to numerical values\n",
    "mood_mapping = {\"Senang\": 1, \"Biasa saja\": 2, \"Sedikit sedih\": 3, \"Sangat sedih\": 4}\n",
    "data['Mood'] = data['Mood'].map(mood_mapping)\n",
    "\n",
    "# Split data by age group\n",
    "anak_columns = ['Senang_Sekolah', 'Frekuensi_Bermain', 'Kesulitan_Belajar', 'Tingkat_Bertengkar',\n",
    "                'Frekuensi_Membantu', 'Aktivitas_Favorit', 'Rencana_Besok', 'Kepuasan_Hari',\n",
    "                'Peningkatan_Besok']  # Features for Anak-Anak\n",
    "remaja_columns = ['Perasaan_Sekolah', 'Stres_Tingkat', 'Aktivitas_Favorit',\n",
    "                  'Interaksi_Teman_Keluarga', 'Dukungan_Sosial', 'Rencana_Besok',\n",
    "                  'Keyakinan_Tujuan_Hidup']  # Features for Remaja\n",
    "dewasa_columns = ['Perasaan_Karier', 'Stres_Tingkat', 'Aktivitas_Favorit',\n",
    "                  'Interaksi_Orang_Lain', 'Dukungan_Sosial', 'Rencana_Besok',\n",
    "                  'Keyakinan_Tujuan_Hidup']  # Features for Dewasa\n",
    "\n",
    "# Train model for Anak-Anak\n",
    "X_anak = data[anak_columns]\n",
    "y_anak = data['Mood']\n",
    "X_train_anak, X_test_anak, y_train_anak, y_test_anak = train_test_split(X_anak, y_anak, test_size=0.2, random_state=42)\n",
    "model_anak = GradientBoostingClassifier(random_state=42)\n",
    "model_anak.fit(X_train_anak, y_train_anak)\n",
    "print(\"Anak-Anak Model Performance:\")\n",
    "print(classification_report(y_test_anak, model_anak.predict(X_test_anak)))\n",
    "joblib.dump(model_anak, 'mood_prediction_model_anak.pkl')\n",
    "\n",
    "# Train model for Remaja\n",
    "X_remaja = data[remaja_columns]\n",
    "y_remaja = data['Mood']\n",
    "X_train_remaja, X_test_remaja, y_train_remaja, y_test_remaja = train_test_split(X_remaja, y_remaja, test_size=0.2, random_state=42)\n",
    "model_remaja = GradientBoostingClassifier(random_state=42)\n",
    "model_remaja.fit(X_train_remaja, y_train_remaja)\n",
    "print(\"Remaja Model Performance:\")\n",
    "print(classification_report(y_test_remaja, model_remaja.predict(X_test_remaja)))\n",
    "joblib.dump(model_remaja, 'mood_prediction_model_remaja.pkl')\n",
    "\n",
    "# Train model for Dewasa\n",
    "X_dewasa = data[dewasa_columns]\n",
    "y_dewasa = data['Mood']\n",
    "X_train_dewasa, X_test_dewasa, y_train_dewasa, y_test_dewasa = train_test_split(X_dewasa, y_dewasa, test_size=0.2, random_state=42)\n",
    "model_dewasa = GradientBoostingClassifier(random_state=42)\n",
    "model_dewasa.fit(X_train_dewasa, y_train_dewasa)\n",
    "print(\"Dewasa Model Performance:\")\n",
    "print(classification_report(y_test_dewasa, model_dewasa.predict(X_test_dewasa)))\n",
    "joblib.dump(model_dewasa, 'mood_prediction_model_dewasa.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "028db61f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T07:05:50.996596Z",
     "iopub.status.busy": "2025-03-28T07:05:50.996277Z",
     "iopub.status.idle": "2025-03-28T07:05:51.060929Z",
     "shell.execute_reply": "2025-03-28T07:05:51.059631Z"
    },
    "papermill": {
     "duration": 0.068733,
     "end_time": "2025-03-28T07:05:51.062443",
     "exception": false,
     "start_time": "2025-03-28T07:05:50.993710",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted Mood for Anak-Anak: Sangat sedih\n",
      "Predicted Mood for Remaja: Senang\n",
      "Predicted Mood for Dewasa: Sedikit sedih\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import joblib\n",
    "\n",
    "# Load the trained models\n",
    "model_anak = joblib.load('/kaggle/working/mood_prediction_model_anak.pkl')\n",
    "model_remaja = joblib.load('/kaggle/working/mood_prediction_model_remaja.pkl')\n",
    "model_dewasa = joblib.load('/kaggle/working/mood_prediction_model_dewasa.pkl')\n",
    "\n",
    "# Define input samples as DataFrames with matching feature names\n",
    "sample_anak = pd.DataFrame([{\n",
    "    'Senang_Sekolah': 2,  # \"Cukup senang\" -> 2\n",
    "    'Frekuensi_Bermain': 2,  # \"Tidak sama sekali\" -> 2\n",
    "    'Kesulitan_Belajar': 3,  # \"Sangat sulit\" -> 3\n",
    "    'Tingkat_Bertengkar': 2,  # \"Bertengkar\" -> 2\n",
    "    'Frekuensi_Membantu': 2,  # \"Kadang-kadang\" -> 2\n",
    "    'Aktivitas_Favorit': 1,  # Encoded \"Belajar\" -> 1\n",
    "    'Rencana_Besok': 1,  # Encoded \"Belajar\" -> 1\n",
    "    'Kepuasan_Hari': 4,  # \"Tidak puas sama sekali\" -> 4\n",
    "    'Peningkatan_Besok': 0  # Encoded \"Lebih banyak bermain\" -> 0\n",
    "}])\n",
    "\n",
    "sample_remaja = pd.DataFrame([{\n",
    "    'Perasaan_Sekolah': 2,  # \"Cukup tertarik\" -> 2\n",
    "    'Stres_Tingkat': 3,  # \"Sering\" -> 3\n",
    "    'Aktivitas_Favorit': 0,  # Encoded \"Mendengarkan musik\" -> 0\n",
    "    'Interaksi_Teman_Keluarga': 2,  # \"Tidak sama sekali\" -> 2\n",
    "    'Dukungan_Sosial': 2,  # \"Tidak pernah\" -> 2\n",
    "    'Rencana_Besok': 0,  # Encoded \"Mendengarkan musik\" -> 0\n",
    "    'Keyakinan_Tujuan_Hidup': 4  # \"Tidak yakin sama sekali\" -> 4\n",
    "}])\n",
    "\n",
    "sample_dewasa = pd.DataFrame([{\n",
    "    'Perasaan_Karier': 2,  # \"Tidak puas\" -> 2\n",
    "    'Stres_Tingkat': 3,  # \"Sering\" -> 3\n",
    "    'Aktivitas_Favorit': 2,  # Encoded \"Minum kopi/teh\" -> 2\n",
    "    'Interaksi_Orang_Lain': 2,  # \"Tidak sama sekali\" -> 2\n",
    "    'Dukungan_Sosial': 2,  # \"Tidak pernah\" -> 2\n",
    "    'Rencana_Besok': 3,  # Encoded \"Olahraga\" -> 3\n",
    "    'Keyakinan_Tujuan_Hidup': 4  # \"Tidak yakin sama sekali\" -> 4\n",
    "}])\n",
    "# Predict mood for each age group\n",
    "predicted_anak = model_anak.predict(sample_anak)[0]\n",
    "predicted_remaja = model_remaja.predict(sample_remaja)[0]\n",
    "predicted_dewasa = model_dewasa.predict(sample_dewasa)[0]\n",
    "\n",
    "# Map predictions to mood labels\n",
    "mood_reverse_mapping = {1: \"Senang\", 2: \"Biasa saja\", 3: \"Sedikit sedih\", 4: \"Sangat sedih\"}\n",
    "print(\"Predicted Mood for Anak-Anak:\", mood_reverse_mapping[predicted_anak])\n",
    "print(\"Predicted Mood for Remaja:\", mood_reverse_mapping[predicted_remaja])\n",
    "print(\"Predicted Mood for Dewasa:\", mood_reverse_mapping[predicted_dewasa])\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6987357,
     "sourceId": 11192668,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.655602,
   "end_time": "2025-03-28T07:05:51.684806",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-28T07:05:34.029204",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
